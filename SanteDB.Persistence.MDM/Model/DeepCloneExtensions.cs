//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SanteDB.Persistence.MDM {
    using SanteDB.Core.Model;
    
    
    internal static class DeepCloner {
        
        internal static SanteDB.Persistence.MDM.Model.EntityRelationshipMaster CloneDeep(this SanteDB.Persistence.MDM.Model.EntityRelationshipMaster clonee) {
            if ((clonee == null)) {
                return null;
            }
            SanteDB.Persistence.MDM.Model.EntityRelationshipMaster _retVal = new SanteDB.Persistence.MDM.Model.EntityRelationshipMaster();
            // Clone ExternalKey
            if ((clonee.ExternalKey != null)) {
                _retVal.ExternalKey = clonee.ExternalKey;
            }
            // Clone HolderKey
            if ((clonee.HolderKey != null)) {
                _retVal.HolderKey = clonee.HolderKey;
            }
            // Clone NegationIndicator
            if ((clonee.NegationIndicator != null)) {
                _retVal.NegationIndicator = clonee.NegationIndicator;
            }
            // Clone Strength
            if ((clonee.Strength != null)) {
                _retVal.Strength = clonee.Strength;
            }
            // Clone Quantity
            if ((clonee.Quantity != null)) {
                _retVal.Quantity = clonee.Quantity;
            }
            // Clone RelationshipType
            if ((clonee.RelationshipType != null)) {
                _retVal.RelationshipType = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.RelationshipType.DeepCopy()));
            }
            // Clone RelationshipTypeKey
            if ((clonee.RelationshipTypeKey != null)) {
                _retVal.RelationshipTypeKey = clonee.RelationshipTypeKey;
            }
            // Clone RelationshipRole
            if ((clonee.RelationshipRole != null)) {
                _retVal.RelationshipRole = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.RelationshipRole.DeepCopy()));
            }
            // Clone RelationshipRoleKey
            if ((clonee.RelationshipRoleKey != null)) {
                _retVal.RelationshipRoleKey = clonee.RelationshipRoleKey;
            }
            // Clone Classification
            if ((clonee.Classification != null)) {
                _retVal.Classification = ((SanteDB.Core.Model.DataTypes.Concept)(clonee.Classification.DeepCopy()));
            }
            // Clone ClassificationKey
            if ((clonee.ClassificationKey != null)) {
                _retVal.ClassificationKey = clonee.ClassificationKey;
            }
            // Clone TargetEntity
            if ((clonee.TargetEntity != null)) {
                _retVal.TargetEntity = ((SanteDB.Core.Model.Entities.Entity)(clonee.TargetEntity.DeepCopy()));
            }
            // Clone TargetEntityKey
            if ((clonee.TargetEntityKey != null)) {
                _retVal.TargetEntityKey = clonee.TargetEntityKey;
            }
            // Clone EffectiveVersionSequenceId
            if ((clonee.EffectiveVersionSequenceId != null)) {
                _retVal.EffectiveVersionSequenceId = clonee.EffectiveVersionSequenceId;
            }
            // Clone ObsoleteVersionSequenceId
            if ((clonee.ObsoleteVersionSequenceId != null)) {
                _retVal.ObsoleteVersionSequenceId = clonee.ObsoleteVersionSequenceId;
            }
            // Clone SourceEntityKey
            if ((clonee.SourceEntityKey != null)) {
                _retVal.SourceEntityKey = clonee.SourceEntityKey;
            }
            // Clone Key
            if ((clonee.Key != null)) {
                _retVal.Key = clonee.Key;
            }
            // Clone BatchOperation
            _retVal.BatchOperation = clonee.BatchOperation;
            return _retVal;
        }
    }
}
